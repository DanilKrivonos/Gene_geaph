import argparse
import numpy as np
import pandas as pd

parser = argparse.ArgumentParser()
parser.add_argument('-input', type=str, help='blocks_coors.txt file generated by Sibelia', required=True)
parser.add_argument('-out', type=str, help='output filename', required=True)

args = parser.parse_args()


blocks_file = open(args.input, 'r')


graph = {}

sections = []
section = []

print('Read file...')
for line in blocks_file:
    if '--' in line:
        sections.append(section)
        section = []
        continue
    section.append(line[:-1].split('\t'))


print('Processing...')
max_length = -1
for section in sections:
    if 'Description' in section[0]:
        for line in section[1:]:

            graph[line[0]] = {
                'blocks': [],
                'size': line[1],
                'description': line[2]
            }
        continue
    
    block_name = section[0][0].split(' ')[-1][1:]

    for line in section[2:]:
        seq_id, strand, start, end, length = line
        
        if int(length) > max_length:
            max_length = int(length)

        graph[seq_id]['blocks'].append( 
            [int(start), int(end), int(length), block_name] 
        )

out = open(args.out, 'w')


print('Write graph...')
for seq_id in graph:
    graph[seq_id]['blocks'].sort()
    for block in graph[seq_id]['blocks']:
        block[2] = (block[2]/max_length)*10 + 0.01

    blocks = graph[seq_id]['blocks']

    for i in range(len(blocks) - 1):

        out.write('sb{} sb{} g{} {} {} {}\n'.format(
            blocks[i][3],
            blocks[i+1][3],
            seq_id,
            blocks[i][2],
            blocks[i+1][2],
            0.0
        ))

print('Complete!')