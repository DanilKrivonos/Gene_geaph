import argparse
import numpy as np
import pandas as pd
from pyteomics.fasta import read
import sys
import os

parser = argparse.ArgumentParser()
parser.add_argument('-input', type=str, help='blocks_coors.txt file generated by Sibelia', required=True)
parser.add_argument('-out', type=str, help='output filename', required=True)
parser.add_argument('-type', type=str, help='If full - will parse a folf', default=None)
parser.add_argument('-refpa', type=str, help='Path of organisms fold', default=None)
args = parser.parse_args()

if args.type == None:
    blocks_file = open(args.input, 'r')

    graph = {}
    sections = []
    section = []

    print('Read file...')
    for line in blocks_file:
        if '--' in line:
            sections.append(section)
            section = []
            continue
        section.append(line[:-1].split('\t'))

    print('Processing...')
    max_length = -1
    for section in sections:
        if 'Description' in section[0]:
            for line in section[1:]:

                graph[line[0]] = {
                    'blocks': [],
                    'size': line[1],
                    'description': line[2]
                }
            continue
        
        block_name = section[0][0].split(' ')[-1][1:]

        for line in section[2:]:
            seq_id, strand, start, end, length = line
            
            if int(length) > max_length:
                max_length = int(length)

            graph[seq_id]['blocks'].append( 
                [int(start), int(end), int(length), block_name] 
            )

    out = open(args.out, 'w')

    print('Write graph...')
    for seq_id in graph:
        graph[seq_id]['blocks'].sort()
        blocks = graph[seq_id]['blocks']
        for i in range(len(blocks) - 1):
            out.write('sb{} sb{} g{} {} {} {} {} {}\n'.format(
                blocks[i][3],
                blocks[i+1][3],
                seq_id,
                blocks[i][2],
                blocks[i+1][2],
                blocks[i][0],
                blocks[i][1],
                max_length,
            ))
else:
    paths = os.listdir(args.input)
    
    for org in paths:
        #Change your way
        if '_result' in org:
            blocks_file = open(args.input + '/{}/blocks_coords.txt'.format(org))

            graph = {}
            sections = []
            section = []

            print('Read file...')
            for line in blocks_file:
                if '--' in line:
                    sections.append(section)
                    section = []
                    continue
                section.append(line[:-1].split('\t'))

            print('Processing...')
            max_length = -1
            for section in sections:
                if 'Description' in section[0]:
                    for line in section[1:]:

                        graph[line[0]] = {
                            'blocks': [],
                            'size': line[1],
                            'description': line[2]
                        }
                    continue
                
                block_name = section[0][0].split(' ')[-1][1:]

                for line in section[2:]:
                    seq_id, strand, start, end, length = line
                    
                    if int(length) > max_length:
                        max_length = int(length)

                    graph[seq_id]['blocks'].append( 
                        [int(start), int(end), int(length), block_name] 
                    )

            out = open(args.out + org + '/{}.txt'.format(org[: -16]), 'w')

            p = pd.read_csv(args.input + '/{}/blocks_coords.txt'.format(org), header=None, names=('ind', 'size', 'describtion'), sep='\t')
            check_list = {}
            for i in range(len(p)):
                if str(p['describtion'][i]) != 'nan':
                    if str(p['describtion'][i]) != 'Description':
                        check_list[str(p['describtion'][i])] = {}
                else:
                    break

            stains = os.listdir(args.refpa + org[: -16] + '/All/')
            
            for sta in stains:
                if '.DS_Store' in sta:
                    continue
                op_pa = read(args.refpa + org[: -16] + '/All/{}'.format(sta))
                for line in op_pa:
                      for num in check_list:
                        if num in line.description:
                            check_list[num] = [sta[: -12]]
            
            last = []
            for ind in check_list:
                    last.append(check_list[ind])

            print('Write graph...')
            for seq_id in graph:
                graph[seq_id]['blocks'].sort()
                blocks = graph[seq_id]['blocks']
                for i in range(len(blocks) - 1):
                    out.write('sb{} sb{} {} {} {} {} {} {}\n'.format(
                        blocks[i][3],
                        blocks[i+1][3],
                        str(last[int(seq_id) - 1][0]),
                        blocks[i][2],
                        blocks[i+1][2],
                        blocks[i][0],
                        blocks[i][1],
                        max_length,
                    ))
print('Complete!')